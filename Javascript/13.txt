Alright 🚀 let’s break down **`"use strict"` (Strict Mode)** in JavaScript.

---

# 🔹 1. What is Strict Mode?

`"use strict"` is a directive introduced in **ES5 (ECMAScript 2009)** that makes JavaScript code run in a **stricter set of rules**.
It helps catch **common coding mistakes** and **unsafe actions** that JavaScript normally ignores.

You enable it by writing:

```js
"use strict";
```

* At the **top of a file/script** → applies to the whole file.
* At the **top of a function** → applies only to that function.

---

# 🔹 2. Why Strict Mode?

* Makes JavaScript **safer** by throwing errors for bad practices.
* Helps in **debugging** by catching silent failures.
* Prepares your code for **future versions** of JavaScript (since strict mode removes deprecated features).

---

# 🔹 3. Key Differences (Normal vs Strict Mode)

### ✅ Example 1 – Undeclared Variables

```js
// Without strict mode
x = 10;  
console.log(x); // 10 (works, creates a global variable)

// With strict mode
"use strict";
y = 20;  // ❌ ReferenceError: y is not defined
```

---

### ✅ Example 2 – Duplicating Parameters

```js
// Without strict mode
function add(a, a) {
  return a + a; // Uses last "a"
}
console.log(add(2, 3)); // 6

// With strict mode
"use strict";
function add(a, a) { } 
// ❌ SyntaxError: Duplicate parameter name not allowed
```

---

### ✅ Example 3 – Assigning to Read-only Properties

```js
"use strict";
const obj = {};
Object.defineProperty(obj, "x", { value: 42, writable: false });

obj.x = 100;  
// ❌ TypeError: Cannot assign to read-only property 'x'
```

---

### ✅ Example 4 – `this` in Functions

```js
// Without strict mode
function showThis() {
  console.log(this);
}
showThis(); // Window (in browsers)

// With strict mode
"use strict";
function showThis() {
  console.log(this);
}
showThis(); // undefined
```

➡️ Strict mode avoids accidental use of the global object (`window`).

---

### ✅ Example 5 – Reserved Keywords

```js
"use strict";
// ❌ SyntaxError: Unexpected strict mode reserved word
let public = 123;  
let private = 456;
```

---

# 🔹 4. Where It’s Useful

* **Large projects** → prevents hidden bugs.
* **Strict linting environments** (ESLint, TypeScript).
* **Modules in ES6+** → already in strict mode by default.

---

# 🔹 5. Summary

* `"use strict"` enforces **safer coding rules**.
* Prevents:

  * Undeclared variables
  * Duplicate parameters
  * Silent assignment errors
  * Implicit `this = window`
* Modern **ES6 modules are strict by default**, so you don’t always need to add `"use strict"` manually.

---

👉 Do you want me to also list **all errors strict mode throws vs silent behavior in non-strict mode** in a comparison table?
