Got it 👍 Let’s go step by step.

---

### **14. Arrays in JavaScript**

An **array** is a special object used to store multiple values in a single variable.

```js
let fruits = ["apple", "banana", "mango"];
console.log(fruits[0]); // "apple"
console.log(fruits.length); // 3
```

---

### **Common Array Methods**

#### 🔹 **1. `push()`**

Adds one or more elements to the **end** of an array.

```js
let arr = [1, 2];
arr.push(3, 4);
console.log(arr); // [1, 2, 3, 4]
```

---

#### 🔹 **2. `pop()`**

Removes the **last** element from an array and returns it.

```js
let arr = [1, 2, 3];
let last = arr.pop();
console.log(last); // 3
console.log(arr);  // [1, 2]
```

---

#### 🔹 **3. `shift()`**

Removes the **first** element and returns it.

```js
let arr = [10, 20, 30];
let first = arr.shift();
console.log(first); // 10
console.log(arr);   // [20, 30]
```

---

#### 🔹 **4. `unshift()`**

Adds one or more elements to the **beginning** of the array.

```js
let arr = [20, 30];
arr.unshift(10);
console.log(arr); // [10, 20, 30]
```

---

#### 🔹 **5. `map()`**

Creates a **new array** by applying a function to each element.

```js
let numbers = [1, 2, 3];
let doubled = numbers.map(num => num * 2);
console.log(doubled); // [2, 4, 6]
```

---

#### 🔹 **6. `filter()`**

Creates a **new array** with elements that pass a condition.

```js
let numbers = [5, 12, 8, 130, 44];
let big = numbers.filter(num => num > 10);
console.log(big); // [12, 130, 44]
```

---

#### 🔹 **7. `reduce()`**

Reduces the array to a **single value** by applying a function.

```js
let numbers = [1, 2, 3, 4];
let sum = numbers.reduce((acc, curr) => acc + curr, 0);
console.log(sum); // 10
```

---

#### 🔹 **8. `forEach()`**

Executes a function for each element (does **not** return a new array).

```js
let colors = ["red", "green", "blue"];
colors.forEach(c => console.log(c));
// red
// green
// blue
```

---

#### 🔹 **9. `find()`**

Returns the **first element** that matches a condition.

```js
let numbers = [5, 12, 8, 130, 44];
let found = numbers.find(num => num > 10);
console.log(found); // 12
```

---

#### 🔹 **10. `some()` and `every()`**

* `some()` → returns **true** if at least one element matches.
* `every()` → returns **true** if **all** elements match.

```js
let numbers = [1, 2, 3, 4];
console.log(numbers.some(n => n > 3));  // true
console.log(numbers.every(n => n > 0)); // true
```

---

#### 🔹 **11. `includes()`**

Checks if an array contains a value.

```js
let fruits = ["apple", "banana", "mango"];
console.log(fruits.includes("banana")); // true
```

---

#### 🔹 **12. `slice()`**

Returns a **shallow copy** of a portion of an array.

```js
let arr = [1, 2, 3, 4, 5];
console.log(arr.slice(1, 4)); // [2, 3, 4] (end index not included)
```

---

#### 🔹 **13. `splice()`**

Changes the array by adding/removing elements.

```js
let arr = [1, 2, 3, 4];
arr.splice(2, 1, 99); // remove 1 element at index 2, insert 99
console.log(arr); // [1, 2, 99, 4]
```

---

✅ **Quick Summary Table**

| Method         | Modifies Original? | Returns                      |
| -------------- | ------------------ | ---------------------------- |
| push, pop      | ✅ Yes              | New length / removed element |
| shift, unshift | ✅ Yes              | Removed / new length         |
| map, filter    | ❌ No               | New array                    |
| reduce         | ❌ No               | Single value                 |
| forEach        | ❌ No               | undefined                    |
| find           | ❌ No               | First match                  |
| some, every    | ❌ No               | Boolean                      |
| includes       | ❌ No               | Boolean                      |
| slice          | ❌ No               | New array                    |
| splice         | ✅ Yes              | Removed items                |

---

Do you want me to also show you **real-life use cases** (like how arrays are used in e-commerce cart, filtering products, summing totals, etc.) to make these methods more practical?
