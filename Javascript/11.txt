Perfect üëç Let‚Äôs dive into **JavaScript Scope (global, function, block)**.

---

# üîπ What is Scope?

**Scope** defines where variables can be **accessed** or **modified** in your code.
It determines a variable‚Äôs **lifetime** and **visibility**.

---

# 1Ô∏è‚É£ **Global Scope**

* Variables declared **outside** of any function or block.
* Accessible **everywhere** in the program.

```js
let globalVar = "I am global";

function show() {
  console.log(globalVar); // ‚úÖ Accessible
}

show();
console.log(globalVar); // ‚úÖ Accessible
```

‚ö†Ô∏è Be careful: too many global variables can cause conflicts.

---

# 2Ô∏è‚É£ **Function Scope**

* Variables declared **inside a function** are only available **inside that function**.
* Defined using `var`, `let`, or `const`.

```js
function testScope() {
  let functionVar = "I exist only in this function";
  console.log(functionVar); // ‚úÖ Accessible
}

testScope();
// console.log(functionVar); ‚ùå Error: not defined
```

---

# 3Ô∏è‚É£ **Block Scope**

* A block is code inside `{ }` (loops, if, etc.).
* Variables declared with `let` and `const` are block-scoped.
* `var` ignores block scope ‚Üí it becomes function/global scoped.

```js
if (true) {
  let blockLet = "Block-scoped with let";
  const blockConst = "Block-scoped with const";
  var blockVar = "Not block-scoped, var leaks!";
}

console.log(blockVar);   // ‚úÖ Works (var is function/global scoped)
// console.log(blockLet); // ‚ùå Error
// console.log(blockConst); // ‚ùå Error
```

---

# üîπ Scope Chain

If a variable is not found in the current scope, JS looks **upward** in the outer scopes ‚Üí until **global scope**.

```js
let outer = "outer";

function parent() {
  let inner = "inner";
  
  function child() {
    console.log(outer); // ‚úÖ Found in parent/global
    console.log(inner); // ‚úÖ Found in parent
  }
  
  child();
}

parent();
```

---

# üîπ Summary

| Scope Type   | Declared Where?                | Accessible Where?      |
| ------------ | ------------------------------ | ---------------------- |
| **Global**   | Outside any block/function     | Everywhere             |
| **Function** | Inside a function              | Only in that function  |
| **Block**    | Inside `{}` with `let`/`const` | Only inside that block |

---

‚úÖ **Key Points**

* `var` ‚Üí function scope (ignores block).
* `let` & `const` ‚Üí block scope (preferred).
* Scope chain allows inner functions to use outer variables.

---

Would you like me to now create **10 practice Q\&A on Scope** (global, function, block) just like we did for operators?
