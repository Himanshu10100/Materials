Absolutely! Let's break down **Error Handling** in JavaScript using `try`, `catch`, `finally`, and `throw`.

---

## ✅ 24. Error Handling in JavaScript

JavaScript uses **`try...catch` blocks** to handle errors **gracefully**, so your code doesn't crash when something unexpected happens.

---

## 🔹 `try...catch` Syntax

```javascript
try {
  // Code that might throw an error
} catch (error) {
  // Code to handle the error
} finally {
  // Code that always runs (optional)
}
```

---

### 🔸 `try`

* Wraps the code that **might fail**.
* If no error: `catch` is skipped.

### 🔸 `catch`

* Runs **only if** an error occurs in the `try` block.
* Receives an `error` object with info like message and stack trace.

### 🔸 `finally` *(optional)*

* **Always runs**, whether an error happened or not.
* Good for cleanup code (e.g., closing a file, stopping a loader).

---

### ✅ Example:

```javascript
try {
  let result = riskyFunction();
  console.log("Result:", result);
} catch (error) {
  console.error("An error occurred:", error.message);
} finally {
  console.log("This will always run.");
}
```

---

## 🔹 `throw` – Creating Custom Errors

You can use `throw` to **manually throw an error**.

### ✅ Syntax:

```javascript
throw new Error("Something went wrong");
```

### ✅ Example:

```javascript
function divide(a, b) {
  if (b === 0) {
    throw new Error("Cannot divide by zero");
  }
  return a / b;
}

try {
  console.log(divide(10, 0));
} catch (e) {
  console.log("Caught error:", e.message); // Caught error: Cannot divide by zero
}
```

---

## ✅ Summary Table

| Keyword   | Purpose                             |
| --------- | ----------------------------------- |
| `try`     | Wrap code that might throw an error |
| `catch`   | Handle the error if one occurs      |
| `finally` | Always run (used for cleanup)       |
| `throw`   | Manually throw an error             |

---

## ⚠️ Notes:

* If you don’t handle errors, they can crash your script.
* You can use `throw` to implement your **own custom validation rules**.
* You can re-throw an error inside `catch` if needed.

---

### ✅ Real-World Example: JSON Parse

```javascript
const json = '{"name": "Alice"}';

try {
  const user = JSON.parse(json);
  console.log(user.name);
} catch (e) {
  console.log("Invalid JSON!");
} finally {
  console.log("Parsing complete.");
}
```

---

Great! Let's expand into **error handling with asynchronous code**, specifically with:

* Promises (`.catch`)
* `async/await` and `try...catch`

---

## ✅ Handling Errors in Promises

### 🔹 Using `.catch()`

If you're using **promises**, errors are caught using `.catch()`.

### ✅ Example:

```javascript
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => {
    console.log('Data:', data);
  })
  .catch(error => {
    console.error('Fetch error:', error.message);
  });
```

* If there's a network error or bad JSON, the `.catch()` block runs.

---

## ✅ Handling Errors with `async/await` and `try...catch`

`async/await` is a cleaner way to write async code. But to catch errors, you **must wrap it in `try...catch`**.

### ✅ Example:

```javascript
async function getData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log('Data:', data);
  } catch (error) {
    console.error('Error fetching data:', error.message);
  } finally {
    console.log('Request finished (success or fail)');
  }
}

getData();
```

---

### ✅ Custom Error with `throw` in Async Code

```javascript
async function getUser(id) {
  try {
    if (!id) {
      throw new Error('User ID is required');
    }

    const response = await fetch(`/users/${id}`);
    if (!response.ok) {
      throw new Error('User not found');
    }

    const user = await response.json();
    console.log(user);
  } catch (error) {
    console.error('Error:', error.message);
  }
}
```

---

## 🧠 Summary: Sync vs Async Error Handling

| Style       | Error Handling |
| ----------- | -------------- |
| Sync Code   | `try...catch`  |
| Promises    | `.catch()`     |
| Async/Await | `try...catch`  |

---

## 🛠 Tip:

In async functions, **any `await`ed promise that rejects** will jump straight to the `catch` block.

---